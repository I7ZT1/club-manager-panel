from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn
from fastapi import FastAPI, Depends, HTTPException, Response, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from core.config import settings
from routers import routers_api
from typing import Callable
import time
from utils.logger import setup_logging


logger = setup_logging()


def cors_setup(app):
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["https://billing.klubok-kz.com:5173", "http://localhost:3000", "http://billing.cc-poker.com"],
        allow_credentials=True,
        allow_methods=["GET", "POST", "HEAD", "OPTIONS", "PUT", "DELETE", "PATCH"],
        allow_headers=[
            "Set-Cookie",
            "Access-Control-Allow-Headers",
            "Content-Type",
            "Authorization",
            "Access-Control-Allow-Origin",
        ],
    )


def start_application():
    app = FastAPI()
    app.include_router(routers_api)
    cors_setup(app)
    app.mount("/uploads", StaticFiles(directory=str(settings.BASE_DIR) + "/uploads"), name="uploads")
    return app


app = start_application()


@app.middleware("http")
async def log_requests(request: Request, call_next: Callable):
    start_time = time.time()
    
    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–∞–º—è—Ç—å
    request_body = await request.body()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ receive
    async def receive_override():
        return {
            "type": "http.request",
            "body": request_body,
            "more_body": False
        }

    modified_request = Request(request.scope, receive_override)

    try:
        # –û—Ç–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        response = await call_next(modified_request)
        duration = time.time() - start_time
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—à–∏–±–∫–∏ (4xx, 5xx)
        if response.status_code >= 400:  # –ó–∞–º–µ–Ω–∏–ª True –Ω–∞ response.status_code >= 400
            logger.error(
                f"‚õëÔ∏è –û—à–∏–±–∫–∞: {response.status_code}. "
                f"–ú–µ—Ç–æ–¥: {request.method}, –ü—É—Ç—å: {request.url.path}, –í—Ä–µ–º—è: {duration:.2f}s"
            )
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            logger.error(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request_body.decode('utf-8', errors='replace')}")

            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            response_body = b"".join([chunk async for chunk in response.body_iterator])
            logger.error(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_body.decode('utf-8', errors='replace')}")

            return Response(
                content=response_body,
                status_code=response.status_code,
                headers=dict(response.headers),
                media_type=response.media_type
            )

        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ-–ª–æ–≥
        logger.info(
            f"‚úÖ –£—Å–ø–µ—Ö: {response.status_code}. –ú–µ—Ç–æ–¥: {request.method}, –ü—É—Ç—å: {request.url.path}, "
            f"–í—Ä–µ–º—è: {duration:.2f}s"
        )

        return response

    except Exception as e:
        # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        duration = time.time() - start_time
        logger.error(
            f"üí• Internal Server Error (500). "
            f"Method: {request.method}, Path: {request.url.path}, Duration: {duration:.2f}s Error: {str(e)}"
        )
        logger.error(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request_body.decode('utf-8', errors='replace')}")
        logger.exception("Full traceback:")
        
        return Response(
            content='{"detail": "Internal Server Error"}',
            media_type="application/json",
            status_code=500
        )


if __name__ == "__main__":
    uvicorn.run(
        app,
        host=settings.PROJECT_IP,
        port=settings.PROJECT_PORT,
        ssl_keyfile="./cert/privkey1.pem",
        ssl_certfile="./cert/fullchain1.pem"
    )
